---
import "@fontsource/atkinson-hyperlegible";
import "@fontsource/source-serif-pro";
import "../styles/global.css";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = "Jakob Bouchard â€“ Game Developer",
	description = "The portfolio of Jakob Bouchard",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<!-- <script
	async
	defer
	src="https://umami.jakobbouchard.dev/umami.js"
	data-website-id="e6d09bc6-f1fb-4d06-ac14-cd10147e8a41"
	data-domains="jakobbouchard.dev"
	data-do-not-track="true"
></script> -->

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

	if (typeof localStorage !== "undefined") {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("theme-dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
